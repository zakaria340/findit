<?php
namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * AnnoncesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnoncesRepository extends \Doctrine\ORM\EntityRepository {

  public function findAllPagineEtTrie($page, $nbMaxParPage, $ids_count) {

    if (!is_numeric($page)) {
      throw new InvalidArgumentException(
        'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
      );
    }

    if ($page < 1) {
      throw new NotFoundHttpException('La page demandÃ©e n\'existe pas');
    }

    if (!is_numeric($nbMaxParPage)) {
      throw new InvalidArgumentException(
        'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
      );
    }

    $qb = $this->createQueryBuilder('a');
    
    $qb->where("a.idAnnonces IN(:ids)");
    $qb->setParameter('ids', $ids_count);

    $query = $qb->getQuery();
    /*$query->leftJoin('a.ville', 'v');*/
    //$query->innerJoin('a.villes','name as labelVille');

    /*return $this->getEntityManager()
      ->createQueryBuilder()
      ->select('r')
      ->from('CRMCoreBundle:Route', 'r')
      ->innerJoin('r.routegroup','rg')
      ->innerJoin('rg.profiles','p')
      ->innerJoin('p.users','u')
      ->where('u.id = :user_id')
      ->setParameter('user_id', $user->getId())
      ->getQuery()
      ->getResult();*/

    $premierResultat = ($page - 1) * $nbMaxParPage;

    $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
    $paginator = new Paginator($query);

    if (($paginator->count() <= $premierResultat) && $page != 1) {
      throw new NotFoundHttpException('La page demandÃ©e n\'existe pas.');
    }

    return $paginator;
  }
}
