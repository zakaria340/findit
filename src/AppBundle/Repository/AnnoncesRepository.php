<?php
namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * AnnoncesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnoncesRepository extends \Doctrine\ORM\EntityRepository {

  public function findAllPagineEtTrie($page, $nbMaxParPage, $ids_count) {

    if (!is_numeric($page)) {
      throw new InvalidArgumentException(
        'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
      );
    }

    if ($page < 1) {
      throw new NotFoundHttpException('La page demandée n\'existe pas');
    }

    if (!is_numeric($nbMaxParPage)) {
      throw new InvalidArgumentException(
        'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
      );
    }

    $qb = $this->createQueryBuilder('a');

    $qb->where("a.idAnnonces IN(:ids)");
    $qb->setParameter('ids', $ids_count);
    $qb->orderBy('a.date', 'DESC');
    $qb->orderBy('a.prix', 'DESC');

    $query = $qb->getQuery();
    $premierResultat = ($page - 1) * $nbMaxParPage;

    $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
    $paginator = new Paginator($query);

    if (($paginator->count() <= $premierResultat) && $page != 1) {
      throw new NotFoundHttpException('La page demandée n\'existe pas.');
    }

    return $paginator;
  }

  /**
   * @param $ville
   * @param $tags
   * @param $keys
   */
  public function findAllSimilar($ville, $tags) {
    $qb = $this->createQueryBuilder('a');
    $qb->where("a.ville IN(:ville) AND a.tags IN(:tag)");
    $qb->setParameters(array('ville' => $ville, 'tag' => $tags));
    $query = $qb->getQuery();
    $query->setMaxResults(20);
    $similiarAnnonces = $query->execute();

    shuffle($similiarAnnonces);
    $similiarAnnonces = array_splice($similiarAnnonces, 0, 6);
    return $similiarAnnonces;
  }

  /**
   * @param $ville
   *
   * @return array|mixed
   */
  public function RandomAnnonces($ville) {
    $qb = $this->createQueryBuilder('a');
    $qb->where("a.ville IN(:ville)");
    $qb->setParameters(array('ville' => $ville));
    $query = $qb->getQuery();
    $query->setMaxResults(20);
    $similiarAnnonces = $query->execute();

    shuffle($similiarAnnonces);
    $similiarAnnonces = array_splice($similiarAnnonces, 0, 8);
    return $similiarAnnonces;
  }

}
